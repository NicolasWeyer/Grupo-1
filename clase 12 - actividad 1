package clase12;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Map;
public class Actividad1 {
	int n = 0;

	public static void AgregarVertice(int vertice, Map<Integer,ArrayList<Integer>> grafo  ) {
		ArrayList<Integer> conexiones = new ArrayList<>();
		grafo.put(vertice, conexiones);
	}
	public static void AgregarArista(int v1, int v2, Map<Integer,ArrayList<Integer>> grafo ) {
		ArrayList<Integer> conexiones = grafo.get(v1);
		conexiones.add(v2);
	}
	private static void DFSUtil(int v, boolean[] visitado,Map<Integer,ArrayList<Integer>> grafo ) {
        // Marcar el vértice actual como visitado y mostrarlo
        visitado[v] = true;
        System.out.print(v + " ");
        // Recorrer todos los vértices adyacentes al vértice actual
        for (int i = 0; i<visitado.length; i++ ) {
            if (!visitado[i]) {
                DFSUtil(i, visitado, grafo); // Llamada recursiva para los vértices no visitados
            }
        }
    }

    // Método principal DFS que llama a DFSUtil
    public static void DFS(int inicio,Map<Integer,ArrayList<Integer>> grafo) {
        // Array de booleanos para marcar los vértices visitados
        boolean[] visitado = new boolean[6];

        // Llamar al método recursivo DFSUtil comenzando desde el vértice "inicio"
        DFSUtil(inicio, visitado,grafo);
    }
    public static void main(String[] args) {
    	Map<Integer,ArrayList<Integer>> grafo = new HashMap<>(6);
    	for (int i = 6; i>=0; i--) {
    		AgregarVertice(i,grafo);
    		System.out.println(i);
    	}
    	AgregarArista(0,1,grafo);
    	AgregarArista(0,2,grafo);
    	AgregarArista(0,4,grafo);
    	AgregarArista(1,3,grafo);
    	AgregarArista(1,5,grafo);
    	AgregarArista(1,0,grafo);
    	AgregarArista(2,6,grafo);
    	AgregarArista(2,0,grafo);
    	AgregarArista(3,1,grafo);
    	AgregarArista(4,0,grafo);
    	AgregarArista(4,5,grafo);
    	AgregarArista(5,1,grafo);
    	AgregarArista(5,4,grafo);
    	AgregarArista(6,2,grafo);
    	ArrayList<Integer> c = grafo.get(0);
    	for (int i = 0; i<c.size();i++) {
    		System.out.print(c.get(i));
    	}
    	DFS(0,grafo);
    }
}

